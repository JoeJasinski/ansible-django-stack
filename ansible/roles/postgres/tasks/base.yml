---

- include: install_facts.yml
  when: postgres__install_facts

- name: Load OS-Specific Tasks
  include: "{{ item }}"
  with_first_found:
   - "os-{{ ansible_distribution|lower }}-{{ ansible_distribution_release }}.yml"
   - "os-{{ ansible_distribution|lower }}.yml"
   - "os-{{ ansible_os_family|lower }}.yml"
   - "os-default.yml"

- include_vars: "{{ item }}"
  with_first_found:
   - "os-vars-{{ ansible_distribution|lower }}-{{ ansible_distribution_release }}.yml"
   - "os-vars-{{ ansible_distribution|lower }}.yml"
   - "os-vars-{{ ansible_os_family }}.yml"
   - "os-vars-default.yml"

# Create our config
#- name: Create postgresql.conf from template
#  template: >
#    src="postgresql.conf.j2"
#    dest="/etc/postgresql/{{postgres__version}}/main/postgresql.conf"
#    owner=postgres group=postgres mode=0644
#  notify: restart postgresql


- name: Setup data directory
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*data_directory "
    line: "data_directory = '{{postgres__data_directory}}'"
  notify: "restart postgresql"

- name: Setup location of hba_file
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*hba_file "
    line: "hba_file = '{{postgres__hba_file}}'"
  notify: "restart postgresql"

- name: Setup location of ident_file
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*ident_file "
    line: "ident_file = '{{postgres__ident_file}}'"
  notify: "restart postgresql"

- name: Setup location of external_pid_file
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*external_pid_file "
    line: "external_pid_file = '{{postgres__external_pid_file}}'"
  notify: "restart postgresql"

- name: Setup listen_addresses
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*listen_addresses "
    line: "listen_addresses = '{{postgres__listen_addresses}}'"
  notify: "restart postgresql"

- name: Setup postgres port
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*port "
    line: "port = {{postgres__port}}"
  notify: "restart postgresql"

- name: Setup shared_buffers
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*shared_buffers "
    line: "shared_buffers = {{postgres__shared_buffers}}"
  notify: "restart postgresql"

- name: Setup work_mem
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*work_mem "
    line: "work_mem = {{postgres__work_mem}}"
  notify: "restart postgresql"

- name: Setup maintenance_work_mem
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*maintenance_work_mem "
    line: "maintenance_work_mem = {{postgres__maintenance_work_mem}}"
  notify: "restart postgresql"

- name: Setup wal_buffers
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*wal_buffers "
    line: "wal_buffers = {{postgres__wal_buffers}}"
  notify: "restart postgresql"

- name: Setup log_statement
  lineinfile:
    dest: "{{postgres__postgresql_conf}}"
    regexp: "^#?\\s*log_statement "
    line: "log_statement = '{{postgres__log_statement}}'"
  notify: "restart postgresql"



- name: ensure postgres is enabled at boot
  service: name=postgresql enabled={{postgres__enabled_on_startup}}

- name: Create database User
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ postgres__db_user }}"
    password: "{{ postgres__db_password }}"
    encrypted: yes

- name: Create database
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ postgres__db_name }}"
    owner: "{{ postgres__db_user }}"
    encoding: 'UTF-8'
    state:  present

- name: ensure user does not have unnecessary privilege
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{postgres__db_user}}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
